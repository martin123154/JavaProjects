package main.java.com.mzelek.jdbc.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class ScenaManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/";

	private String createTableScena = "CREATE TABLE Scena(scena_id int GENERATED BY DEFAULT AS IDENTITY, nazwa varchar(20), przedstawienie_id int)";

	private PreparedStatement DodajScene;
	private PreparedStatement Poka¿Scene;
	private PreparedStatement PokazScenepoPrzedstawieniu;
	private PreparedStatement UsuñWszystkoScena;

	private Statement statement;


public ScenaManager() {
try {
	connection = DriverManager.getConnection(url);
	statement = connection.createStatement();

	ResultSet rs = connection.getMetaData().getTables(null, null, null,
			null);
	boolean tableExists = false;
	while (rs.next()) {
		if ("Scena".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
			tableExists = true;
			break;
		}
	}

	if (!tableExists)
		statement.executeUpdate(createTableScena);

	DodajScene = connection
			.prepareStatement("INSERT INTO Scena (nazwa, przedstawienie_id) VALUES (?, ?)");
	Poka¿Scene = connection
			.prepareStatement("SELECT scena_id, nazwa, przedstawienie_id FROM Scena");
	PokazScenepoPrzedstawieniu = connection
			.prepareStatement("SELECT * FROM Scena WHERE przedstawienie_id = ?");
	UsuñWszystkoScena = connection
			.prepareStatement("DELETE FROM Scena");

} catch (SQLException e) {
	e.printStackTrace();
}
}
public Connection getConnection() {
	return connection;
}
public void wyczyœæTabeleScena() {
	try {
		UsuñWszystkoScena.executeUpdate();
	} catch (SQLException e) {
		e.printStackTrace();
	}
}
public int DodajScene(Scena scena) {
	int count = 0;
	try {
		DodajScene.setString(1, scena.getNazwa());
		DodajScene.setInt(2, scena.getPrzedstawienie_id());
		

		count = DodajScene.executeUpdate();

	} catch (SQLException e) {
		e.printStackTrace();
	}
	return count;
}
public List<Scena> Poka¿Scene() {
	List<Scena> sceny = new ArrayList<Scena>();

	try {
		ResultSet rs = Poka¿Scene.executeQuery();

		while (rs.next()) {
			Scena s = new Scena();
			s.setScena_id(rs.getInt("scena_id"));
			s.setNazwa(rs.getString("nazwa"));
			s.setPrzedstawienie_id(rs.getInt("przedstawienie_id"));
		
			sceny.add(s);
		}

	} catch (SQLException e) {
		e.printStackTrace();
	}
	return sceny;
}
public Scena pokazScenePoPrzedstawieniu(Scena scena)
{
    try
    {
    	PokazScenepoPrzedstawieniu.setInt(1, scena.getPrzedstawienie_id());
        ResultSet rs = PokazScenepoPrzedstawieniu.executeQuery();

        while (rs.next())
        {
            scena = new Scena(rs.getString("nazwa"),rs.getInt("przedstawienie_id"));
            scena.setScena_id(rs.getInt("scena_id"));
            return scena;
        }
    }
    catch (SQLException e)
    {
        e.printStackTrace();
    }

    return null;
}
}
