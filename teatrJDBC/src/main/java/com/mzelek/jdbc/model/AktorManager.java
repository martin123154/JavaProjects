package main.java.com.mzelek.jdbc.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;


public class AktorManager {
	

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/";

	private String createTableAktor = "CREATE TABLE Aktor(aktor_id int GENERATED BY DEFAULT AS IDENTITY, imie varchar(20), nazwisko varchar(20), pesel varchar(11))";

	private PreparedStatement DodajAktora;
	private PreparedStatement UsuñWszystkoAktor;
	private PreparedStatement UsuñjedenrekordAktor;
	private PreparedStatement Poka¿Aktora;
	private PreparedStatement ZmieñAktora;
	private PreparedStatement DropTableAktor;

	private Statement statement;
	
	public AktorManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Aktor".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableAktor);

			DodajAktora = connection
					.prepareStatement("INSERT INTO Aktor (imie, nazwisko, pesel) VALUES (?, ?, ?)");
			UsuñWszystkoAktor = connection
					.prepareStatement("DELETE FROM Aktor");
			UsuñjedenrekordAktor = connection
					.prepareStatement ("DELETE FROM Aktor WHERE aktor_id = ?");
			Poka¿Aktora = connection
					.prepareStatement("SELECT aktor_id, imie, nazwisko, pesel FROM Aktor");
			ZmieñAktora = connection
					.prepareStatement("UPDATE Aktor set imie = ?, nazwisko = ?, pesel = ? where aktor_id = ?");
			DropTableAktor = connection
					.prepareStatement("DROP TABLE Aktor");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	public Connection getConnection() {
		return connection;
	}

	public void WyczyœæTabeleAktor() {
		try {
			UsuñWszystkoAktor.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	public int DodajAktora(Aktor aktor) {
		int count = 0;
		try {
			DodajAktora.setString(1, aktor.getImie());
			DodajAktora.setString(2, aktor.getNazwisko());
			DodajAktora.setString(3, aktor.getPesel());
			

			count = DodajAktora.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	public List<Aktor> Poka¿Aktora() {
		List<Aktor> aktorzy = new ArrayList<Aktor>();

		try {
			ResultSet rs = Poka¿Aktora.executeQuery();

			while (rs.next()) {
				Aktor a = new Aktor();
				a.setAktor_id(rs.getInt("aktor_id"));
				a.setImie(rs.getString("imie"));
				a.setNazwisko(rs.getString("nazwisko"));
				a.setPesel(rs.getString("Pesel"));
				aktorzy.add(a);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return aktorzy;
	}
	
	public int ZmieñAktora(Aktor aktor){
		int count = 0;
		try{
			ZmieñAktora.setString(1, aktor.getImie());
			ZmieñAktora.setString(2, aktor.getNazwisko());
			ZmieñAktora.setString(3, aktor.getPesel());
			ZmieñAktora.setInt(4, aktor.getAktor_id());
			count = ZmieñAktora.executeUpdate();
		}catch(SQLException e){
			e.printStackTrace();
		}
		return count;
	}
	
	public int UsuñjedenrekordAktor(Aktor aktor)
	{
		int count = 0;
		try {
			UsuñjedenrekordAktor.setInt(1, aktor.getAktor_id());

			count = UsuñjedenrekordAktor.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
		
	}
	
	public void DropTableAktor() {
		try {
			DropTableAktor.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

}
